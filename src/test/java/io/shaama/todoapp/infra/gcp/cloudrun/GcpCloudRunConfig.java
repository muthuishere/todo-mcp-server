package io.shaama.todoapp.infra.gcp.cloudrun;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.Map;
import java.util.HashMap;

public class GcpCloudRunConfig {
    
    // Basic Configuration
    private String projectId;
    private String region;
    private String serviceName;
    
    // Container Configuration
    private String dockerfilePath;
    private String environmentFile;
    private int containerPort;
    
    // Resource Configuration
    private String cpu;
    private String memory;
    private int minInstances;
    private int maxInstances;
    private int concurrency;
    private int timeout;
    
    // Access Configuration
    private boolean allowUnauthenticated;
    
    // Environment Variables
    private Map<String, String> environmentVariables;
    
    // Constructor
    public GcpCloudRunConfig() {
        this.region = "us-central1";
        this.dockerfilePath = "Dockerfile";
        this.environmentFile = ".env";
        this.containerPort = 8080;
        this.cpu = "1";
        this.memory = "512Mi";
        this.minInstances = 0;
        this.maxInstances = 10;
        this.concurrency = 80;
        this.timeout = 300;
        this.allowUnauthenticated = true;
        this.environmentVariables = new HashMap<>();
    }
    
    // Computed getters for derived names
    @JsonIgnore
    public String getArtifactRegistryRepository() {
        return serviceName.toLowerCase().replace("_", "-");
    }
    
    @JsonIgnore
    public String getImageUri() {
        return region + "-docker.pkg.dev/" + projectId + "/" + getArtifactRegistryRepository() + "/" + serviceName.toLowerCase();
    }
    
    @JsonIgnore
    public String getServiceUrl() {
        return "https://" + serviceName.toLowerCase() + "-" + getRandomHash() + "-" + region + ".a.run.app";
    }
    
    private String getRandomHash() {
        // This would be generated by Google Cloud Run
        return "xxxxxxxx";
    }
    
    // Getters and Setters
    public String getProjectId() {
        return projectId;
    }
    
    public void setProjectId(String projectId) {
        this.projectId = projectId;
    }
    
    public String getRegion() {
        return region;
    }
    
    public void setRegion(String region) {
        this.region = region;
    }
    
    public String getServiceName() {
        return serviceName;
    }
    
    public void setServiceName(String serviceName) {
        this.serviceName = serviceName;
    }
    
    public String getDockerfilePath() {
        return dockerfilePath;
    }
    
    public void setDockerfilePath(String dockerfilePath) {
        this.dockerfilePath = dockerfilePath;
    }
    
    public String getEnvironmentFile() {
        return environmentFile;
    }
    
    public void setEnvironmentFile(String environmentFile) {
        this.environmentFile = environmentFile;
    }
    
    public int getContainerPort() {
        return containerPort;
    }
    
    public void setContainerPort(int containerPort) {
        this.containerPort = containerPort;
    }
    
    public String getCpu() {
        return cpu;
    }
    
    public void setCpu(String cpu) {
        this.cpu = cpu;
    }
    
    public String getMemory() {
        return memory;
    }
    
    public void setMemory(String memory) {
        this.memory = memory;
    }
    
    public int getMinInstances() {
        return minInstances;
    }
    
    public void setMinInstances(int minInstances) {
        this.minInstances = minInstances;
    }
    
    public int getMaxInstances() {
        return maxInstances;
    }
    
    public void setMaxInstances(int maxInstances) {
        this.maxInstances = maxInstances;
    }
    
    public int getConcurrency() {
        return concurrency;
    }
    
    public void setConcurrency(int concurrency) {
        this.concurrency = concurrency;
    }
    
    public int getTimeout() {
        return timeout;
    }
    
    public void setTimeout(int timeout) {
        this.timeout = timeout;
    }
    
    public boolean isAllowUnauthenticated() {
        return allowUnauthenticated;
    }
    
    public void setAllowUnauthenticated(boolean allowUnauthenticated) {
        this.allowUnauthenticated = allowUnauthenticated;
    }
    
    public Map<String, String> getEnvironmentVariables() {
        return environmentVariables;
    }
    
    public void setEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
    }
}